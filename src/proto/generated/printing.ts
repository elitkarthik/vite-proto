// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "printing.proto" (package "printing", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * -----------------------------
 * Printing Service Messages
 * -----------------------------
 *
 * @generated from protobuf message printing.PrintLinesRequest
 */
export interface PrintLinesRequest {
    /**
     * @generated from protobuf field: printing.PrintingMessageHeader header = 1;
     */
    header?: PrintingMessageHeader;
    /**
     * @generated from protobuf field: repeated string linesToPrint = 2;
     */
    linesToPrint: string[];
}
/**
 * @generated from protobuf message printing.InitializeRequest
 */
export interface InitializeRequest {
    /**
     * @generated from protobuf field: printing.PrintingMessageHeader header = 1;
     */
    header?: PrintingMessageHeader;
    /**
     * @generated from protobuf field: repeated printing.PrinterTypeProto printerTypes = 2;
     */
    printerTypes: PrinterTypeProto[];
}
// -----------------------------
// Printing Service Models
// -----------------------------

/**
 * @generated from protobuf message printing.PrintingServiceResponse
 */
export interface PrintingServiceResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: string errorMessage = 2;
     */
    errorMessage: string;
}
/**
 * @generated from protobuf message printing.PrintingMessageHeader
 */
export interface PrintingMessageHeader {
    /**
     * @generated from protobuf field: string printerName = 1;
     */
    printerName: string;
    /**
     * @generated from protobuf field: string printerType = 2;
     */
    printerType: string;
    /**
     * @generated from protobuf field: string institutionNumber = 3;
     */
    institutionNumber: string;
    /**
     * @generated from protobuf field: string institutionGUID = 4;
     */
    institutionGUID: string;
    /**
     * @generated from protobuf field: string token = 5;
     */
    token: string;
}
/**
 * @generated from protobuf message printing.PrinterTypeProto
 */
export interface PrinterTypeProto {
    /**
     * @generated from protobuf field: string typeName = 1;
     */
    typeName: string;
    /**
     * @generated from protobuf field: repeated printing.PrintCodeProto PrintCodes = 2 [json_name = "PrintCodes"];
     */
    printCodes: PrintCodeProto[];
}
/**
 * @generated from protobuf message printing.PrintCodeProto
 */
export interface PrintCodeProto {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string hexCode = 2;
     */
    hexCode: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class PrintLinesRequest$Type extends MessageType<PrintLinesRequest> {
    constructor() {
        super("printing.PrintLinesRequest", [
            { no: 1, name: "header", kind: "message", T: () => PrintingMessageHeader },
            { no: 2, name: "linesToPrint", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PrintLinesRequest>): PrintLinesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.linesToPrint = [];
        if (value !== undefined)
            reflectionMergePartial<PrintLinesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrintLinesRequest): PrintLinesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* printing.PrintingMessageHeader header */ 1:
                    message.header = PrintingMessageHeader.internalBinaryRead(reader, reader.uint32(), options, message.header);
                    break;
                case /* repeated string linesToPrint */ 2:
                    message.linesToPrint.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrintLinesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* printing.PrintingMessageHeader header = 1; */
        if (message.header)
            PrintingMessageHeader.internalBinaryWrite(message.header, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated string linesToPrint = 2; */
        for (let i = 0; i < message.linesToPrint.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.linesToPrint[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message printing.PrintLinesRequest
 */
export const PrintLinesRequest = new PrintLinesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InitializeRequest$Type extends MessageType<InitializeRequest> {
    constructor() {
        super("printing.InitializeRequest", [
            { no: 1, name: "header", kind: "message", T: () => PrintingMessageHeader },
            { no: 2, name: "printerTypes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PrinterTypeProto }
        ]);
    }
    create(value?: PartialMessage<InitializeRequest>): InitializeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.printerTypes = [];
        if (value !== undefined)
            reflectionMergePartial<InitializeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InitializeRequest): InitializeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* printing.PrintingMessageHeader header */ 1:
                    message.header = PrintingMessageHeader.internalBinaryRead(reader, reader.uint32(), options, message.header);
                    break;
                case /* repeated printing.PrinterTypeProto printerTypes */ 2:
                    message.printerTypes.push(PrinterTypeProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InitializeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* printing.PrintingMessageHeader header = 1; */
        if (message.header)
            PrintingMessageHeader.internalBinaryWrite(message.header, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated printing.PrinterTypeProto printerTypes = 2; */
        for (let i = 0; i < message.printerTypes.length; i++)
            PrinterTypeProto.internalBinaryWrite(message.printerTypes[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message printing.InitializeRequest
 */
export const InitializeRequest = new InitializeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrintingServiceResponse$Type extends MessageType<PrintingServiceResponse> {
    constructor() {
        super("printing.PrintingServiceResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "errorMessage", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PrintingServiceResponse>): PrintingServiceResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        message.errorMessage = "";
        if (value !== undefined)
            reflectionMergePartial<PrintingServiceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrintingServiceResponse): PrintingServiceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* string errorMessage */ 2:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrintingServiceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* string errorMessage = 2; */
        if (message.errorMessage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message printing.PrintingServiceResponse
 */
export const PrintingServiceResponse = new PrintingServiceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrintingMessageHeader$Type extends MessageType<PrintingMessageHeader> {
    constructor() {
        super("printing.PrintingMessageHeader", [
            { no: 1, name: "printerName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "printerType", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "institutionNumber", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "institutionGUID", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PrintingMessageHeader>): PrintingMessageHeader {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.printerName = "";
        message.printerType = "";
        message.institutionNumber = "";
        message.institutionGUID = "";
        message.token = "";
        if (value !== undefined)
            reflectionMergePartial<PrintingMessageHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrintingMessageHeader): PrintingMessageHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string printerName */ 1:
                    message.printerName = reader.string();
                    break;
                case /* string printerType */ 2:
                    message.printerType = reader.string();
                    break;
                case /* string institutionNumber */ 3:
                    message.institutionNumber = reader.string();
                    break;
                case /* string institutionGUID */ 4:
                    message.institutionGUID = reader.string();
                    break;
                case /* string token */ 5:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrintingMessageHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string printerName = 1; */
        if (message.printerName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.printerName);
        /* string printerType = 2; */
        if (message.printerType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.printerType);
        /* string institutionNumber = 3; */
        if (message.institutionNumber !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.institutionNumber);
        /* string institutionGUID = 4; */
        if (message.institutionGUID !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.institutionGUID);
        /* string token = 5; */
        if (message.token !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message printing.PrintingMessageHeader
 */
export const PrintingMessageHeader = new PrintingMessageHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrinterTypeProto$Type extends MessageType<PrinterTypeProto> {
    constructor() {
        super("printing.PrinterTypeProto", [
            { no: 1, name: "typeName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "PrintCodes", kind: "message", jsonName: "PrintCodes", repeat: 1 /*RepeatType.PACKED*/, T: () => PrintCodeProto }
        ]);
    }
    create(value?: PartialMessage<PrinterTypeProto>): PrinterTypeProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.typeName = "";
        message.printCodes = [];
        if (value !== undefined)
            reflectionMergePartial<PrinterTypeProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrinterTypeProto): PrinterTypeProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string typeName */ 1:
                    message.typeName = reader.string();
                    break;
                case /* repeated printing.PrintCodeProto PrintCodes = 2 [json_name = "PrintCodes"];*/ 2:
                    message.printCodes.push(PrintCodeProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrinterTypeProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string typeName = 1; */
        if (message.typeName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.typeName);
        /* repeated printing.PrintCodeProto PrintCodes = 2 [json_name = "PrintCodes"]; */
        for (let i = 0; i < message.printCodes.length; i++)
            PrintCodeProto.internalBinaryWrite(message.printCodes[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message printing.PrinterTypeProto
 */
export const PrinterTypeProto = new PrinterTypeProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrintCodeProto$Type extends MessageType<PrintCodeProto> {
    constructor() {
        super("printing.PrintCodeProto", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "hexCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PrintCodeProto>): PrintCodeProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.hexCode = "";
        if (value !== undefined)
            reflectionMergePartial<PrintCodeProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrintCodeProto): PrintCodeProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string hexCode */ 2:
                    message.hexCode = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrintCodeProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string hexCode = 2; */
        if (message.hexCode !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.hexCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message printing.PrintCodeProto
 */
export const PrintCodeProto = new PrintCodeProto$Type();
/**
 * @generated ServiceType for protobuf service printing.Printing
 */
export const Printing = new ServiceType("printing.Printing", [
    { name: "PrintLines", options: {}, I: PrintLinesRequest, O: PrintingServiceResponse },
    { name: "Initialize", options: {}, I: InitializeRequest, O: PrintingServiceResponse }
]);
